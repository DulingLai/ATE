package dulinglai.android.ate.infoflow;

import soot.SootMethod;
import soot.jimple.infoflow.Infoflow;
import soot.jimple.infoflow.cfg.BiDirICFGFactory;
import soot.jimple.infoflow.sourcesSinks.manager.ISourceSinkManager;

import java.util.Collection;

/**
 * Specialized {@link Infoflow} class that allows the data flow analysis to be
 * run inside an existing Soot instance
 *
 * @author Steven Arzt
 *
 */
public class InPlaceInfoflow extends Infoflow implements IInPlaceInfoflow {

    /**
     * Creates a new instance of the Infoflow class for analyzing Android APK files.
     *
     * @param androidPath                 If forceAndroidJar is false, this is the
     *                                    base directory of the platform files in
     *                                    the Android SDK. If forceAndroidJar is
     *                                    true, this is the full path of a single
     *                                    android.jar file.
     * @param forceAndroidJar             True if a single platform JAR file shall
     *                                    be forced, false if Soot shall pick the
     *                                    appropriate platform version
     * @param icfgFactory                 The interprocedural CFG to be used by the
     *                                    InfoFlowProblem
     * @param additionalEntryPointMethods Additional methods generated by the entry
     *                                    point creator that are not directly entry
     *                                    ypoints on their own
     */
    public InPlaceInfoflow(String androidPath, boolean forceAndroidJar, BiDirICFGFactory icfgFactory,
                           Collection<SootMethod> additionalEntryPointMethods) {
        super(androidPath, forceAndroidJar, icfgFactory);
        this.additionalEntryPointMethods = additionalEntryPointMethods;
    }

    @Override
    public void runAnalysis(final ISourceSinkManager sourcesSinks, SootMethod entryPoint) {
        this.dummyMainMethod = entryPoint;
        super.runAnalysis(sourcesSinks);
    }

}
